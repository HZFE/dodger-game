{"version":3,"sources":["src/config.ts","src/sprite/Sprite.ts","src/sprite/BulletSprite.ts","src/sprite/PlayreSprite.ts","src/game.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.4e33628f.js","sourceRoot":"..","sourcesContent":["/**\n * 游戏相关配置\n */\n/** 游戏背景颜色 */\nexport const BackgroundColor = '#f3f3f3';\n/** 一个屏幕中子弹的数量 */\nexport const BulletCount = 30;\n/** 分数文本样式 */\nexport const CountFont = '50px Georgia';\n\n/**\n * 子弹相关配置\n * */\n/** 生成的子弹半径范围 */\nexport const BulletRadiusRange = [5, 80];\n/** 生成的子弹颜色列表 */\nexport const BulletColorList = ['#3da8f5', '#d71345', '#ffaf38', '#f7acbc', '#7b5d5f', '#f47920', '#f05b72'];\n/** 生成的子弹速度范围 */\nexport const BulletSpeedRange = [2, 6];\n/** 子弹射击偏离范围 */\nexport const BulletOffset = 300;\n\n/**\n * 玩家相关配置\n */\n/** 玩家颜色 */\nexport const PlayerColor = '#232323';\n/** 玩家三角形的高 */\nexport const PlayerHeight = 40;\n/** 玩家每次移动的距离 */\nexport const PlayerStep = 5;","export default abstract class Sprite {\n  constructor(\n    public ctx: CanvasRenderingContext2D,\n    public x: number,\n    public y: number,\n  ) {}\n  /** 绘制该精灵的方法 */\n  abstract render(): void;\n  /** 每次绘制后会调用的方法 */\n  abstract update(): void;\n}\n","import { BulletColorList, BulletOffset, BulletRadiusRange, BulletSpeedRange } from '../config';\nimport Sprite from './Sprite';\n\n/** 子弹精灵 */\nexport default class BulletSprite extends Sprite {\n  /** 子弹颜色 */\n  color: string = BulletColorList[~~(Math.random() * BulletColorList.length)];\n  /** 水平速度 */\n  vx!: number;\n  /** 垂直速度 */\n  vy!: number;\n\n  constructor(\n    ctx: CanvasRenderingContext2D,\n    x: number,\n    y: number,\n    /** 半径 */\n    public r: number,\n    /** 攻击目标 */\n    target: { x: number, y: number },\n  ) {\n    super(ctx, x, y);\n    this.initBullet(target);\n  }\n\n  /** 初始化子弹 */\n  initBullet(target: { x: number, y: number }) {\n    // 根据半径得到我们的速度\n    const speed = BulletSpeedRange[1] - (\n      ((this.r - BulletRadiusRange[0]) / (BulletRadiusRange[1] - BulletRadiusRange[0])) // 子弹半径在半径范围里的比例\n      * (BulletSpeedRange[1] - BulletSpeedRange[0]) // 乘以速度的范围\n    ); // 再加上最低的速度\n\n    // 子弹偏差后的结果位置\n    const targetX = target.x + ((Math.random() * BulletOffset * 2) - BulletOffset);\n    const targetY = target.y + ((Math.random() * BulletOffset * 2) - BulletOffset);\n\n    // 知道两点就能确定角度了\n    const angle = Math.atan2(targetY - this.y, targetX - this.x);\n\n    // 三角函数得到子弹的水平速度和垂直速度了\n    this.vx = Math.cos(angle) * speed;\n    this.vy = Math.sin(angle) * speed;\n  }\n\n  /** 绘制子弹 */\n  public render() {\n    this.ctx.fillStyle = this.color;\n    this.ctx.beginPath();\n    this.ctx.arc(this.x, this.y, this.r, 0, Math.PI * 2, true);\n    this.ctx.closePath();\n    this.ctx.fill();\n  }\n\n  /** 更新子弹位置 */\n  public update() {\n    this.x += this.vx;\n    this.y += this.vy;\n  }\n}","import { PlayerColor, PlayerHeight, PlayerStep } from '../config';\nimport BulletSprite from './BulletSprite';\nimport Sprite from './Sprite';\n\n/**\n * 用二进制表示方向\n */\nconst enum Direction {\n  Up = 1,\n  Down = 2,\n  Left = 4,\n  Right = 8,\n}\n\n/** 玩家精灵 */\nexport default class PlayerSprite extends Sprite {\n  /** 玩家颜色 */\n  color: string = PlayerColor;\n  /** 玩家旋转的角度 */\n  angle: number = 0;\n  /** 玩家正在前进的方向 */\n  direction: number = 0;\n  /** 手指按住的地方 */\n  touchPos?: { x: number, y: number };\n\n  constructor(\n    ctx: CanvasRenderingContext2D,\n    x: number,\n    y: number,\n    private controlType: 'keyboard' | 'touch' = 'keyboard'\n  ) {\n    super(ctx, x, y);\n  }\n\n  /** 开始监听用户输入 */\n  public startListener() {\n    if (this.controlType === 'keyboard') {\n      window.addEventListener('keydown', this.handleKeyDown);\n      window.addEventListener('keyup', this.handleKeyUp);\n    } else if (this.controlType === 'touch') {\n      window.addEventListener('touchstart', this.handleTouchStart, { passive: false });\n      window.addEventListener('touchmove', this.handleTouchStart, { passive: false });\n      window.addEventListener('touchend', this.handleTouchEnd);\n      window.addEventListener('touchcancel', this.handleTouchEnd);\n    }\n  }\n\n  /** 停止监听用户输入 */\n  public stopListener() {\n    if (this.controlType === 'keyboard') {\n      window.removeEventListener('keydown', this.handleKeyDown);\n      window.removeEventListener('keyup', this.handleKeyUp);\n    } else if (this.controlType === 'touch') {\n      window.removeEventListener('touchstart', this.handleTouchStart);\n      window.removeEventListener('touchmove', this.handleTouchStart);\n      window.removeEventListener('touchend', this.handleTouchEnd);\n      window.removeEventListener('touchcancel', this.handleTouchEnd);\n    }\n  }\n\n  /** 处理玩家按下键盘 */\n  private handleKeyDown = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case 'w':\n      case 'ArrowUp':\n        this.direction |= Direction.Up;\n        break;\n      case 's':\n      case 'ArrowDown':\n        this.direction |= Direction.Down;\n        break;\n      case 'a':\n      case 'ArrowLeft':\n        this.direction |= Direction.Left;\n        break;\n      case 'd':\n      case 'ArrowRight':\n        this.direction |= Direction.Right;\n        break;\n    }\n  }\n\n  /** 处理玩家松开按键 */\n  private handleKeyUp = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case 'w':\n      case 'ArrowUp':\n        this.direction &= ~Direction.Up;\n        break;\n      case 's':\n      case 'ArrowDown':\n        this.direction &= ~Direction.Down;\n        break;\n      case 'a':\n      case 'ArrowLeft':\n        this.direction &= ~Direction.Left;\n        break;\n      case 'd':\n      case 'ArrowRight':\n        this.direction &= ~Direction.Right;\n        break;\n    }\n  }\n\n  /** 处理手指触摸位置 */\n  handleTouchStart = (e: TouchEvent) => {\n    e.preventDefault();\n    const event = e.targetTouches[0];\n    const dpr = window.devicePixelRatio || 1;\n    this.touchPos = {\n      x: event.pageX * dpr,\n      y: event.pageY * dpr,\n    }\n  }\n\n  /** 触摸结束 */\n  handleTouchEnd = () => {\n    this.touchPos = null;\n  }\n\n  /** 绘制玩家 */\n  public render() {\n    this.ctx.fillStyle = this.color;\n\n    // 旋转角度\n    this.ctx.save();\n\n    // 绘制玩家\n    this.getPlayerPath();\n    this.ctx.fill();\n\n    // 将旋转复位\n    this.ctx.restore();\n  }\n\n  /** 得到玩家图形的路径 */\n  public getPlayerPath() {\n    this.ctx.beginPath();\n    const angles = this.getPlayerAngles();\n    this.ctx.moveTo(angles[0].x, angles[0].y);\n    this.ctx.lineTo(angles[1].x, angles[1].y);\n    this.ctx.lineTo(angles[2].x, angles[2].y);\n    this.ctx.closePath();\n  }\n\n  /** 得到三角形的三个角 */\n  public getPlayerAngles(): { x: number, y: number }[] {\n    const d = PlayerHeight / 2;\n    return [\n      { x: this.x, y: this.y - d },\n      { x: this.x - Math.cos(Math.PI / 6) * d, y: this.y + Math.sin(Math.PI / 6) * d },\n      { x: this.x + Math.cos(Math.PI / 6) * d, y: this.y + Math.sin(Math.PI / 6) * d },\n    ]\n    // 根据转轴公式进行旋转\n    .map(({ x, y }) => ({\n      x: this.x + (x - this.x) * Math.cos(this.angle) - (y - this.y) * Math.sin(this.angle),\n      y: this.y + (y - this.y) * Math.cos(this.angle) + (x - this.x) * Math.sin(this.angle),\n    }));\n  }\n\n  /** 更新玩家位置 */\n  public update() {\n    if (this.controlType === 'touch') {\n      if (!this.touchPos) return;\n      // 获取手指按住的与玩家的角度\n      const angle = Math.atan2(this.touchPos.y - this.y, this.touchPos.x - this.x);\n\n      // 根据角度将距离分为水平距离和垂直距离\n      this.x += PlayerStep * Math.cos(angle);\n      this.y += PlayerStep * Math.sin(angle);\n\n      // 因为玩家的角度是朝上的，而正常坐标轴是朝右的，估每次旋转都加上 90°\n      this.angle = angle + Math.PI / 2;\n    } else {\n      // 按方向前进\n      if (this.direction & Direction.Up) {\n        this.y -= PlayerStep;\n      }\n      if (this.direction & Direction.Down) {\n        this.y += PlayerStep;\n      }\n      if (this.direction & Direction.Left) {\n        this.x -= PlayerStep;\n      }\n      if (this.direction & Direction.Right) {\n        this.x += PlayerStep;\n      }\n      // 按方向更新旋转角度\n      switch (this.direction) {\n        case Direction.Up:\n          this.angle = 0;\n          break;\n        case Direction.Down:\n          this.angle = Math.PI;\n          break;\n        case Direction.Left:\n          this.angle = Math.PI / 2 * 3;\n          break;\n        case Direction.Right:\n          this.angle = Math.PI / 2;\n          break;\n        case Direction.Left | Direction.Up:\n          this.angle = -Math.PI / 4;\n          break;\n        case Direction.Left | Direction.Down:\n          this.angle = -Math.PI / 4 * 3;\n          break;\n        case Direction.Right | Direction.Up:\n          this.angle = Math.PI / 4;\n          break;\n        case Direction.Right | Direction.Down:\n          this.angle = Math.PI / 4 * 3;\n          break;\n      }\n    }\n  }\n\n  /** 判断子弹是否射中玩家 */\n  public isCrash(bullet: BulletSprite): boolean {\n    let isCrash = false;\n\n    // 判断子弹圆心是否已经在三角形中\n    this.ctx.save();\n    this.getPlayerPath();\n    isCrash = this.ctx.isPointInPath(bullet.x, bullet.y);\n    this.ctx.restore();\n\n    // 如果不在，则判断圆心到三条边的距离\n    if (!isCrash) {\n      const angles = this.getPlayerAngles();\n      for (let i = 0; i < angles.length; i++) {\n        // 先得到一条边的两个角\n        const A = angles[i];\n        const B = i === angles.length - 1 ? angles[0] : angles[i + 1];\n\n        // 连接两个角得到三角形边的向量 v1\n        let v1 = { x: B.x - A.x, y: B.y - A.y };\n        // 连接圆心和第一个角得到的向量 v2\n        let v2 = { x: bullet.x - A.x, y: bullet.y - A.y };\n\n        // 三角形边的长度\n        const len = Math.sqrt(v1.x * v1.x + v1.y * v1.y);\n\n        // 将 v1 单位化\n        v1 = { x: v1.x / len, y: v1.y / len };\n\n        // v1·v2 的点积就是投影的长度\n        const u = v1.x * v2.x + v1.y * v2.y;\n\n        // 边上离圆心最近的点\n        let lx, ly;\n\n        // 如果投影长度 <= 0，则代表圆心在三角形边的左边，那距离最近的点就是角A\n        if (u <= 0) {\n          lx = A.x;\n          ly = A.y;\n        }\n        // 如果投影长度 >= 边长，则代表圆心在三角形边的右边，那距离最近的点就是角B\n        else if (u >= len) {\n          lx = B.x;\n          ly = B.y;\n        }\n        // 如果都不是则在边的正上方\n        else {\n          lx = A.x + u * v1.x;\n          ly = A.y + u * v1.y;\n        }\n\n        // 判断圆心距离边最近的点是否小于半径\n        if (Math.sqrt((bullet.x - lx) ** 2 + (bullet.y - ly) ** 2) < bullet.r) {\n          isCrash = true;\n          break;\n        }\n      }\n    }\n    return isCrash;\n  }\n}","import BulletSprite from './sprite/BulletSprite';\nimport { BackgroundColor, BulletRadiusRange, BulletCount, CountFont, PlayerHeight } from './config';\nimport PlayerSprite from './sprite/PlayreSprite';\n\nexport default class Game {\n  private ctx!: CanvasRenderingContext2D;\n  private width: number;\n  private height: number;\n  /** 游戏是否已开始 */\n  private isStart: boolean = false;\n  /** 子弹列表 */\n  private bullets: BulletSprite[] = [];\n  /** 玩家 */\n  private player: PlayerSprite;\n  /** 游戏进行的秒数 */\n  public second: number = 0;\n  /** 是否移动端 */\n  public isMobile: boolean;\n  /** 游戏结束时回调 */\n  onGameOver?: (count: number) => void;\n\n  constructor(\n    private canvas: HTMLCanvasElement,\n    options: {\n      width: number;\n      height: number;\n      isMobile?: boolean;\n    }\n  ) {\n    this.isMobile = options.isMobile;\n    const dpr = window.devicePixelRatio || 1;\n    this.canvas.width = this.width = options.width * dpr;\n    this.canvas.height = this.height = options.height * dpr;\n    this.canvas.style.width = `${options.width}px`;\n    this.canvas.style.height = `${options.height}px`;\n    this.ctx = this.canvas.getContext('2d');\n  }\n\n  /** 游戏分数 */\n  get count() {\n    return ~~(this.second / 1000);\n  }\n\n  /** 开始游戏 */\n  start() {\n    if (this.isStart) return;\n\n    // 初始化玩家\n    this.player = new PlayerSprite(\n      this.ctx,\n      this.width / 2,\n      this.height / 2,\n      this.isMobile ? 'touch' : 'keyboard',\n    );\n\n    this.player.startListener();\n\n\t\tconst step = () => {\n      if (!this.isStart) {\n        this.render();\n        // GameOver\n        this?.onGameOver(this.count);\n        return;\n      }\n      // 记录当前游戏时间\n      this.second += 16.67;\n\t\t\tthis.render();\n      this.update();\n\t\t\trequestAnimationFrame(step);\n\t\t};\n    this.isStart = true;\n\t\trequestAnimationFrame(step);\n  }\n\n  /** 结束游戏 */\n  stop() {\n    this.isStart = false;\n    this.player?.stopListener();\n    this.bullets.length = 0;\n    this.second = 0;\n  }\n\n  /** 生成一个子弹 */\n  addNewBullet() {\n    // 先假设目标在屏幕正中间\n    const target = { x: this.width / 2, y: this.height / 2 };\n\n    // 生成一个随机的子弹半径\n    const r = (Math.random() * (BulletRadiusRange[1] - BulletRadiusRange[0])) + BulletRadiusRange[0];\n\n    // 生成一个随机位置（随机从四个方向进入）\n    const { x, y } = [\n      { x: Math.random() * this.width, y: -r * 2 },                // 上面\n      { x: Math.random() * this.width, y: this.height + (r * 2) }, // 下面\n      { x: -r * 2, y: Math.random() * this.height },               // 左边\n      { x: this.width + (r * 2), y: Math.random() * this.height }, // 右边\n    ][~~(Math.random() * 4)]\n\n    const bullet = new BulletSprite(\n      this.ctx,\n      x,\n      y,\n      r,\n      target,\n    )\n\n    this.bullets.push(bullet);\n  }\n\n  /** 绘制游戏 */\n  render() {\n    // 每次绘制前都需要先清空画布\n    this.ctx.clearRect(0, 0, this.width, this.height);\n    this.renderBackground();\n    this.renderCount();\n    this.player.render();\n    this.bullets.forEach(bullet => bullet.render());\n  }\n\n  /** 更新游戏 */\n  update() {\n    // 更新玩家位置\n    this.player.update();\n\n    // 不允许超出游戏屏幕边缘\n    const edge = PlayerHeight / 2;\n    if (this.player.x < edge) this.player.x = edge;\n    if (this.player.y < edge) this.player.y = edge;\n    if (this.player.x > this.width - edge) this.player.x = this.width - edge;\n    if (this.player.y > this.height - edge) this.player.y = this.height - edge;\n\n    this.bullets = this.bullets.filter(bullet => {\n      // 更新子弹位置\n      bullet.update();\n\n      // 判断子弹是否射中玩家\n      if (this.player.isCrash(bullet)) {\n        this.isStart = false;\n      }\n\n      // 如果飞出屏幕则将子弹销毁\n      return !(\n        bullet.x < -bullet.r * 2 ||               // 飞出左边屏幕\n        bullet.x > this.width + (bullet.r * 2) || // 飞出右边屏幕\n        bullet.y < -bullet.r * 2 ||               // 飞出上边屏幕\n        bullet.y > this.height + (bullet.r * 2)   // 飞出下边屏幕\n      );\n    });\n\n    // 如果屏幕中的子弹数量低于设置的数量，则补全数量\n    for (let i = this.bullets.length; i < BulletCount; i++) this.addNewBullet();\n  }\n\n  /** 绘制游戏背景 */\n  renderBackground() {\n    this.ctx.fillStyle = BackgroundColor;\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  /** 绘制分数 */\n  renderCount() {\n    this.ctx.font = CountFont;\n    this.ctx.textAlign = 'right';\n    this.ctx.fillStyle = '#000';\n    this.ctx.fillText(`${this.count}`, this.width - 20, 50);\n  }\n}\n","import Game from './game';\n\nconst isMobile = !!(navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i));\n\nconst game = new Game(\n  document.getElementById('app') as HTMLCanvasElement,\n  {\n    width: isMobile ? window.innerWidth : 600,\n    height: isMobile ? window.innerHeight: 600,\n    isMobile,\n  }\n);\n\ngame.start();\n\ngame.onGameOver = (count: number) => {\n  setTimeout(() => {\n    if (count < 10) {\n      alert(`你只坚持了 ${count} 秒，有点弱诶 🥴`);\n    } else if (count < 20) {\n      alert(`你坚持了 ${count} 秒，还算不错 🤓`);\n    } else if (count < 30) {\n      alert(`你坚持了 ${count} 秒，强啊 🤠`);\n    } else if (count < 100) {\n      alert(`你坚持了 ${count} 秒，你已经超神了！🥳`);\n    } else {\n      alert('你丫的是开挂了吧？');\n    }\n    game.stop();\n    game.start();\n  });\n};"]}